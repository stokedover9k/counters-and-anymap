Author: Yuriy Skobov
Date: 01/23/2013

======================================
========= Table of Contents ==========
======================================
==========[#INFO:CONTENTS]============
  
  - Libraries
    - AnyMap   [#LIB:ANY_MAP]
    - Counters [#LIB:COUNTERS]

  - Other Code
    - any_iterator [#CODE:ANY_ITERATOR]
    - Unit Tests   [#CODE:UNIT_TESTS]

  - Documentation  [#INFO:DOCS]

  - Installation   [#INFO:INSTALL]
    - Known Issues [#INSTALL:KNOWN_ISSUES]

======================================
============= AnyMap =================
======================================
==========[#LIB:ANY_MAP]==============

AnyMap provides a type-erased map wrapper.  AnyMap can be instanciated using
the standard one-to-one maps which satisfy the interface requirements (e.g.
std::map or boost::unordered_map).  See the documentation for the interface
requirements (doc/html/classMapTypeErasure_1_1AnyMap.html#details).

AnyMap is a template which requires only two type parameters: key type and mapped
value type.  The other details are handled by the core map object.  The class
allows easy interaction between potentially differently implemented maps.  For
example, consider the following code snippet:

  AnyMap<std::string, int> map1( std::map<std::string, int, ...>() );
  AnyMap<std::string, int> map2( boost::unordered_map<std::string, int, ...>() );
  
  map1["one"] = 1;
  map1 == map2;    // returns false
  
  map2["one"] = 1;
  map1 == map2;    // returns true



======================================
============= Counters ===============
======================================
==========[#LIB:COUNTERS]=============

Counters provides several classes for work with probability distributions.
Most important are two class templates: Counter and CounterMap.

Counter<V> is a mapping of objects of type V to counts of type double.  The
Counter can be turned into a proper distribution via the method normalize().  It
also attempts to cache the sum of the counts stored in the Counter.

CounterMap<K, V> is a mapping of objects of type K to Counter<V> objects.  This
class is suitable for representing a conditional probability distribution or a
combined probability distribution.

Both Counter and CounterMap use AnyMap [#LIB:ANY_MAP] to maintain the mappings.



======================================
=========== any_iterator =============
======================================
=========[#CODE:ANY_ITERATOR]=========

The AnyMap and Counters libraries also rely on the any_iterator library.
This library belongs to Thomas Becker 
(see http://thbecker.net/free_software_utilities/type_erasure_for_cpp_iterators/any_iterator.html).  The documentation and examples can be found in the directory
include/IteratorTypeErasure/documentation/.

======================================
=========== Unit Tests ===============
======================================
========[#CODE:UNIT_TESTS]============

The tests are included in the test/ directory and use Google C++ Testing
Framework.  The tests compile to an executable named alltests.  To successfully
compile that executable, make sure gtest/gtest.h can be found by the compiler.

The unit tests are not exhaustive, but provide a thorough testing of the API.



======================================
========== Documentation =============
======================================
===========[#INFO:DOCS]===============

The documentation for AnyMap and Counters libraries is generated using
doxygen and is provided within the header files.  If the documentation is not
included or the included documentation is outdated, it can be generated by 
executing "doxygen Doxyfile" from the package root directory.  This will put
the generated documentation in html format into the docs directory.

The documentation for any_iterator is available in a separate directory
(see [#CODE:ANY_ITERATOR]).


======================================
========== Installation ==============
======================================
==========[#INFO:INSTALL]=============

The AnyMap and Counters libraries are all-template libraries and therefore do
not require special installation.  That said, they heavily rely on the Boost
libraries, so make sure Boost can be found by the compiler if you include them.
Additionally, if you want to compile the unit tests, you will need to ensure that
Google C++ Testing Framework can be found by the compiler.
Another executable (named main) will be created.  This program contains a few
more tests of AnyMap (see src/main.cpp).

From the package root directory execute (if something goes wrong, see Known 
Issues section below [#INSTALL:KNOWN_ISSUES]):

mkdir build
cd build
cmake ..
make

./alltests
./main

======================================
=========== Known Issues =============
======================================
=======[#INSTALL:KNOWN_ISSUES]========

In the installation described above (#[INFO:INSTALL]), the command "cmake .."
may fail to find the Boost package.  In my case this was because the cmake
module used to find Boost was named FindBoost.cmake but cmake was looking for
FindBOOST.cmake.  I solved this problem by navigating to the module's directory
(/usr/share/cmake-2.8/Modules, in my case) and executing 
"ln -s FindBoost.cmake FindBOOST.cmake".
